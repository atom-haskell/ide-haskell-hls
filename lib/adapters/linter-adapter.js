"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LinterAdapter = void 0;
const atom_1 = require("atom");
class LinterAdapter {
    constructor(upi) {
        this.upi = upi;
        this.name = 'hls';
        this.emitter = new atom_1.Emitter();
        this.messages = [];
    }
    dispose() {
        this.emitter.emit('did-destroy');
        this.emitter.dispose();
        this.upi.dispose();
    }
    clearMessages() {
        this.messages = [];
        this.updateMessages();
    }
    getMessages() {
        return this.messages;
    }
    onDidDestroy(callback) {
        return this.emitter.on('did-destroy', callback);
    }
    onDidUpdate(callback) {
        return this.emitter.on('did-update', callback);
    }
    setAllMessages(msgs) {
        this.messages = msgs;
        this.updateMessages();
    }
    setMessages(uri, msgs) {
        this.messages = this.messages
            .filter((x) => x.location.file !== uri)
            .concat(msgs);
        this.updateMessages();
    }
    updateMessages() {
        this.upi.setMessages(this.messages.map(convertMessages));
        this.emitter.emit('did-update');
    }
}
exports.LinterAdapter = LinterAdapter;
function convertMessages(msg) {
    return {
        message: { highlighter: 'hint.message.haskell', text: msg.excerpt },
        position: msg.location.position.start,
        uri: msg.location.file,
        severity: msg.severity === 'info' ? 'lint' : msg.severity,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGludGVyLWFkYXB0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYWRhcHRlcnMvbGludGVyLWFkYXB0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsK0JBQThCO0FBSTlCLE1BQWEsYUFBYTtJQUl4QixZQUFvQixHQUFxQjtRQUFyQixRQUFHLEdBQUgsR0FBRyxDQUFrQjtRQUhsQyxTQUFJLEdBQUcsS0FBSyxDQUFBO1FBQ1gsWUFBTyxHQUFHLElBQUksY0FBTyxFQUFFLENBQUE7UUFDdkIsYUFBUSxHQUFxQixFQUFFLENBQUE7SUFDSyxDQUFDO0lBQzdDLE9BQU87UUFDTCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQTtRQUNoQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQ3RCLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDcEIsQ0FBQztJQUNELGFBQWE7UUFDWCxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQTtRQUNsQixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUE7SUFDdkIsQ0FBQztJQUNELFdBQVc7UUFDVCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUE7SUFDdEIsQ0FBQztJQUNELFlBQVksQ0FBQyxRQUErQjtRQUMxQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUNqRCxDQUFDO0lBQ0QsV0FBVyxDQUFDLFFBQStCO1FBQ3pDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQ2hELENBQUM7SUFDRCxjQUFjLENBQUMsSUFBc0I7UUFDbkMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUE7UUFDcEIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFBO0lBQ3ZCLENBQUM7SUFDRCxXQUFXLENBQUMsR0FBVyxFQUFFLElBQWlDO1FBQ3hELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVE7YUFDMUIsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksS0FBSyxHQUFHLENBQUM7YUFDdEMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ2YsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFBO0lBQ3ZCLENBQUM7SUFDTyxjQUFjO1FBQ3BCLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUE7UUFDeEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUE7SUFDakMsQ0FBQztDQUNGO0FBckNELHNDQXFDQztBQUVELFNBQVMsZUFBZSxDQUFDLEdBQW1CO0lBQzFDLE9BQU87UUFDTCxPQUFPLEVBQUUsRUFBRSxXQUFXLEVBQUUsc0JBQXNCLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxPQUFPLEVBQUU7UUFDbkUsUUFBUSxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUs7UUFDckMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSTtRQUN0QixRQUFRLEVBQUUsR0FBRyxDQUFDLFFBQVEsS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVE7S0FDMUQsQ0FBQTtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbWl0dGVyIH0gZnJvbSAnYXRvbSdcbmltcG9ydCAqIGFzIFVQSSBmcm9tICdhdG9tLWhhc2tlbGwtdXBpJ1xuaW1wb3J0IHR5cGUgKiBhcyBMaW50ZXIgZnJvbSAnYXRvbS9saW50ZXInXG5cbmV4cG9ydCBjbGFzcyBMaW50ZXJBZGFwdGVyIGltcGxlbWVudHMgTGludGVyLkluZGllRGVsZWdhdGUge1xuICBwdWJsaWMgbmFtZSA9ICdobHMnXG4gIHByaXZhdGUgZW1pdHRlciA9IG5ldyBFbWl0dGVyKClcbiAgcHJpdmF0ZSBtZXNzYWdlczogTGludGVyLk1lc3NhZ2VbXSA9IFtdXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdXBpOiBVUEkuSVVQSUluc3RhbmNlKSB7fVxuICBkaXNwb3NlKCkge1xuICAgIHRoaXMuZW1pdHRlci5lbWl0KCdkaWQtZGVzdHJveScpXG4gICAgdGhpcy5lbWl0dGVyLmRpc3Bvc2UoKVxuICAgIHRoaXMudXBpLmRpc3Bvc2UoKVxuICB9XG4gIGNsZWFyTWVzc2FnZXMoKSB7XG4gICAgdGhpcy5tZXNzYWdlcyA9IFtdXG4gICAgdGhpcy51cGRhdGVNZXNzYWdlcygpXG4gIH1cbiAgZ2V0TWVzc2FnZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZXNcbiAgfVxuICBvbkRpZERlc3Ryb3koY2FsbGJhY2s6ICh2YWx1ZT86IGFueSkgPT4gdm9pZCkge1xuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIub24oJ2RpZC1kZXN0cm95JywgY2FsbGJhY2spXG4gIH1cbiAgb25EaWRVcGRhdGUoY2FsbGJhY2s6ICh2YWx1ZT86IGFueSkgPT4gdm9pZCkge1xuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIub24oJ2RpZC11cGRhdGUnLCBjYWxsYmFjaylcbiAgfVxuICBzZXRBbGxNZXNzYWdlcyhtc2dzOiBMaW50ZXIuTWVzc2FnZVtdKSB7XG4gICAgdGhpcy5tZXNzYWdlcyA9IG1zZ3NcbiAgICB0aGlzLnVwZGF0ZU1lc3NhZ2VzKClcbiAgfVxuICBzZXRNZXNzYWdlcyh1cmk6IHN0cmluZywgbXNnczogQ29uY2F0QXJyYXk8TGludGVyLk1lc3NhZ2U+KSB7XG4gICAgdGhpcy5tZXNzYWdlcyA9IHRoaXMubWVzc2FnZXNcbiAgICAgIC5maWx0ZXIoKHgpID0+IHgubG9jYXRpb24uZmlsZSAhPT0gdXJpKVxuICAgICAgLmNvbmNhdChtc2dzKVxuICAgIHRoaXMudXBkYXRlTWVzc2FnZXMoKVxuICB9XG4gIHByaXZhdGUgdXBkYXRlTWVzc2FnZXMoKSB7XG4gICAgdGhpcy51cGkuc2V0TWVzc2FnZXModGhpcy5tZXNzYWdlcy5tYXAoY29udmVydE1lc3NhZ2VzKSlcbiAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnZGlkLXVwZGF0ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gY29udmVydE1lc3NhZ2VzKG1zZzogTGludGVyLk1lc3NhZ2UpOiBVUEkuSVJlc3VsdEl0ZW0ge1xuICByZXR1cm4ge1xuICAgIG1lc3NhZ2U6IHsgaGlnaGxpZ2h0ZXI6ICdoaW50Lm1lc3NhZ2UuaGFza2VsbCcsIHRleHQ6IG1zZy5leGNlcnB0IH0sXG4gICAgcG9zaXRpb246IG1zZy5sb2NhdGlvbi5wb3NpdGlvbi5zdGFydCxcbiAgICB1cmk6IG1zZy5sb2NhdGlvbi5maWxlLFxuICAgIHNldmVyaXR5OiBtc2cuc2V2ZXJpdHkgPT09ICdpbmZvJyA/ICdsaW50JyA6IG1zZy5zZXZlcml0eSxcbiAgfVxufVxuIl19