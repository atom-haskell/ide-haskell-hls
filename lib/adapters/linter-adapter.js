"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LinterAdapter = void 0;
const atom_1 = require("atom");
class LinterAdapter {
    constructor(upi) {
        this.upi = upi;
        this.name = 'hls';
        this.emitter = new atom_1.Emitter();
        this.messages = [];
    }
    dispose() {
        this.emitter.emit('did-destroy');
        this.emitter.dispose();
        this.upi = undefined;
    }
    clearMessages() {
        this.messages = [];
        this.updateMessages();
    }
    getMessages() {
        return this.messages;
    }
    onDidDestroy(callback) {
        return this.emitter.on('did-destroy', callback);
    }
    onDidUpdate(callback) {
        return this.emitter.on('did-update', callback);
    }
    setAllMessages(msgs) {
        this.messages = msgs;
        this.updateMessages();
    }
    setMessages(uri, msgs) {
        this.messages = this.messages
            .filter((x) => x.location.file !== uri)
            .concat(msgs);
        this.updateMessages();
    }
    updateMessages() {
        var _a;
        (_a = this.upi) === null || _a === void 0 ? void 0 : _a.setMessages(this.messages.map(convertMessages));
        this.emitter.emit('did-update');
    }
}
exports.LinterAdapter = LinterAdapter;
function convertMessages(msg) {
    return {
        message: { highlighter: 'hint.message.haskell', text: msg.excerpt },
        position: msg.location.position.start,
        uri: msg.location.file,
        severity: msg.severity === 'info' ? 'lint' : msg.severity,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGludGVyLWFkYXB0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYWRhcHRlcnMvbGludGVyLWFkYXB0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsK0JBQThCO0FBSTlCLE1BQWEsYUFBYTtJQUl4QixZQUFvQixHQUFzQjtRQUF0QixRQUFHLEdBQUgsR0FBRyxDQUFtQjtRQUhuQyxTQUFJLEdBQUcsS0FBSyxDQUFBO1FBQ1gsWUFBTyxHQUFHLElBQUksY0FBTyxFQUFFLENBQUE7UUFDdkIsYUFBUSxHQUFxQixFQUFFLENBQUE7SUFDTSxDQUFDO0lBQzlDLE9BQU87UUFDTCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQTtRQUNoQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQ3RCLElBQUksQ0FBQyxHQUFHLEdBQUcsU0FBUyxDQUFBO0lBQ3RCLENBQUM7SUFDRCxhQUFhO1FBQ1gsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUE7UUFDbEIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFBO0lBQ3ZCLENBQUM7SUFDRCxXQUFXO1FBQ1QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFBO0lBQ3RCLENBQUM7SUFDRCxZQUFZLENBQUMsUUFBK0I7UUFDMUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDakQsQ0FBQztJQUNELFdBQVcsQ0FBQyxRQUErQjtRQUN6QyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUNoRCxDQUFDO0lBQ0QsY0FBYyxDQUFDLElBQXNCO1FBQ25DLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFBO1FBQ3BCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQTtJQUN2QixDQUFDO0lBQ0QsV0FBVyxDQUFDLEdBQVcsRUFBRSxJQUFpQztRQUN4RCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRO2FBQzFCLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEtBQUssR0FBRyxDQUFDO2FBQ3RDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNmLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQTtJQUN2QixDQUFDO0lBQ08sY0FBYzs7UUFDcEIsTUFBQSxJQUFJLENBQUMsR0FBRywwQ0FBRSxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQTtRQUN6RCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQTtJQUNqQyxDQUFDO0NBQ0Y7QUFyQ0Qsc0NBcUNDO0FBRUQsU0FBUyxlQUFlLENBQUMsR0FBbUI7SUFDMUMsT0FBTztRQUNMLE9BQU8sRUFBRSxFQUFFLFdBQVcsRUFBRSxzQkFBc0IsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLE9BQU8sRUFBRTtRQUNuRSxRQUFRLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSztRQUNyQyxHQUFHLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJO1FBQ3RCLFFBQVEsRUFBRSxHQUFHLENBQUMsUUFBUSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUTtLQUMxRCxDQUFBO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tICdhdG9tJ1xuaW1wb3J0ICogYXMgVVBJIGZyb20gJ2F0b20taGFza2VsbC11cGknXG5pbXBvcnQgdHlwZSAqIGFzIExpbnRlciBmcm9tICdhdG9tL2xpbnRlcidcblxuZXhwb3J0IGNsYXNzIExpbnRlckFkYXB0ZXIgaW1wbGVtZW50cyBMaW50ZXIuSW5kaWVEZWxlZ2F0ZSB7XG4gIHB1YmxpYyBuYW1lID0gJ2hscydcbiAgcHJpdmF0ZSBlbWl0dGVyID0gbmV3IEVtaXR0ZXIoKVxuICBwcml2YXRlIG1lc3NhZ2VzOiBMaW50ZXIuTWVzc2FnZVtdID0gW11cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB1cGk/OiBVUEkuSVVQSUluc3RhbmNlKSB7fVxuICBkaXNwb3NlKCkge1xuICAgIHRoaXMuZW1pdHRlci5lbWl0KCdkaWQtZGVzdHJveScpXG4gICAgdGhpcy5lbWl0dGVyLmRpc3Bvc2UoKVxuICAgIHRoaXMudXBpID0gdW5kZWZpbmVkXG4gIH1cbiAgY2xlYXJNZXNzYWdlcygpIHtcbiAgICB0aGlzLm1lc3NhZ2VzID0gW11cbiAgICB0aGlzLnVwZGF0ZU1lc3NhZ2VzKClcbiAgfVxuICBnZXRNZXNzYWdlcygpIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlc1xuICB9XG4gIG9uRGlkRGVzdHJveShjYWxsYmFjazogKHZhbHVlPzogYW55KSA9PiB2b2lkKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdHRlci5vbignZGlkLWRlc3Ryb3knLCBjYWxsYmFjaylcbiAgfVxuICBvbkRpZFVwZGF0ZShjYWxsYmFjazogKHZhbHVlPzogYW55KSA9PiB2b2lkKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdHRlci5vbignZGlkLXVwZGF0ZScsIGNhbGxiYWNrKVxuICB9XG4gIHNldEFsbE1lc3NhZ2VzKG1zZ3M6IExpbnRlci5NZXNzYWdlW10pIHtcbiAgICB0aGlzLm1lc3NhZ2VzID0gbXNnc1xuICAgIHRoaXMudXBkYXRlTWVzc2FnZXMoKVxuICB9XG4gIHNldE1lc3NhZ2VzKHVyaTogc3RyaW5nLCBtc2dzOiBDb25jYXRBcnJheTxMaW50ZXIuTWVzc2FnZT4pIHtcbiAgICB0aGlzLm1lc3NhZ2VzID0gdGhpcy5tZXNzYWdlc1xuICAgICAgLmZpbHRlcigoeCkgPT4geC5sb2NhdGlvbi5maWxlICE9PSB1cmkpXG4gICAgICAuY29uY2F0KG1zZ3MpXG4gICAgdGhpcy51cGRhdGVNZXNzYWdlcygpXG4gIH1cbiAgcHJpdmF0ZSB1cGRhdGVNZXNzYWdlcygpIHtcbiAgICB0aGlzLnVwaT8uc2V0TWVzc2FnZXModGhpcy5tZXNzYWdlcy5tYXAoY29udmVydE1lc3NhZ2VzKSlcbiAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnZGlkLXVwZGF0ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gY29udmVydE1lc3NhZ2VzKG1zZzogTGludGVyLk1lc3NhZ2UpOiBVUEkuSVJlc3VsdEl0ZW0ge1xuICByZXR1cm4ge1xuICAgIG1lc3NhZ2U6IHsgaGlnaGxpZ2h0ZXI6ICdoaW50Lm1lc3NhZ2UuaGFza2VsbCcsIHRleHQ6IG1zZy5leGNlcnB0IH0sXG4gICAgcG9zaXRpb246IG1zZy5sb2NhdGlvbi5wb3NpdGlvbi5zdGFydCxcbiAgICB1cmk6IG1zZy5sb2NhdGlvbi5maWxlLFxuICAgIHNldmVyaXR5OiBtc2cuc2V2ZXJpdHkgPT09ICdpbmZvJyA/ICdsaW50JyA6IG1zZy5zZXZlcml0eSxcbiAgfVxufVxuIl19