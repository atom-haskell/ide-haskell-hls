"use strict";
const atom_languageclient_1 = require("atom-languageclient");
const adapters_1 = require("./adapters");
class HLSLanguageClient extends atom_languageclient_1.AutoLanguageClient {
    constructor() {
        super(...arguments);
        this.renderer = { render: null };
    }
    getGrammarScopes() {
        return ['source.haskell'];
    }
    getLanguageName() {
        return 'Haskell';
    }
    getServerName() {
        return 'haskell-language-server';
    }
    startServerProcess(projectPath) {
        return super.spawn('haskell-language-server-wrapper', ['--lsp'], {
            cwd: projectPath,
        });
    }
    consumeMarkdownRenderer(renderer) {
        this.renderer.render = renderer.render;
    }
    consumeUPI(service) {
        let la;
        function getRelevantMessages(editor, range) {
            const messages = la.getMessages();
            const path = editor.getPath();
            return messages
                .filter((x) => x.location.file === path &&
                range.intersectsWith(x.location.position))
                .map((x) => ({
                filePath: x.location.file,
                providerName: 'hls',
                range: x.location.position,
                text: x.excerpt,
                type: 'Info',
            }));
        }
        this.upi = service({
            name: 'hls',
            actions: {
                priority: 50,
                eventTypes: [
                    "context",
                    "keyboard",
                    "mouse",
                    "selection",
                ],
                handler: async (editor, range, type) => {
                    const msgs = getRelevantMessages(editor, range);
                    if (type === "keyboard" && !msgs.length)
                        return undefined;
                    const acts = await this.getCodeActions(editor, range, msgs);
                    if (!acts)
                        return undefined;
                    return Promise.all(acts.map(async (x) => ({
                        title: await x.getTitle(),
                        apply: () => x.apply(),
                    })));
                },
            },
        });
        la = new adapters_1.LinterAdapter(this.upi);
        this.consumeLinterV2(() => la);
        this.consumeDatatip(adapters_1.datatipAdapter(service, this.upi, this.renderer));
        return this.upi;
    }
    async getDatatip(editor, point) {
        const datatip = await super.getDatatip(editor, point);
        if (datatip) {
            if ('component' in datatip) {
                return datatip;
            }
            else {
                datatip.markedStrings = datatip.markedStrings.filter((x) => x.value);
                if (datatip.markedStrings.length > 0) {
                    return datatip;
                }
            }
        }
        return null;
    }
}
module.exports = new HLSLanguageClient();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw2REFBd0Q7QUFHeEQseUNBQTBEO0FBRzFELE1BQU0saUJBQWtCLFNBQVEsd0NBQWtCO0lBQWxEOztRQUVVLGFBQVEsR0FBRyxFQUFFLE1BQU0sRUFBRSxJQUF3QyxFQUFFLENBQUE7SUFzRnpFLENBQUM7SUFyRkMsZ0JBQWdCO1FBQ2QsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUE7SUFDM0IsQ0FBQztJQUNELGVBQWU7UUFDYixPQUFPLFNBQVMsQ0FBQTtJQUNsQixDQUFDO0lBQ0QsYUFBYTtRQUNYLE9BQU8seUJBQXlCLENBQUE7SUFDbEMsQ0FBQztJQUVELGtCQUFrQixDQUFDLFdBQWdCO1FBQ2pDLE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxpQ0FBaUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQy9ELEdBQUcsRUFBRSxXQUFXO1NBQ2pCLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFFRCx1QkFBdUIsQ0FBQyxRQUF5QjtRQUMvQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFBO0lBQ3hDLENBQUM7SUFFRCxVQUFVLENBQUMsT0FBNkI7UUFDdEMsSUFBSSxFQUFpQixDQUFBO1FBQ3JCLFNBQVMsbUJBQW1CLENBQUMsTUFBa0IsRUFBRSxLQUFZO1lBQzNELE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtZQUNqQyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUE7WUFDN0IsT0FBTyxRQUFRO2lCQUNaLE1BQU0sQ0FDTCxDQUFDLENBQUMsRUFBRSxFQUFFLENBQ0osQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEtBQUssSUFBSTtnQkFDeEIsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUM1QztpQkFDQSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQ1gsUUFBUSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSTtnQkFDekIsWUFBWSxFQUFFLEtBQUs7Z0JBQ25CLEtBQUssRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVE7Z0JBQzFCLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTztnQkFDZixJQUFJLEVBQUUsTUFBZTthQUN0QixDQUFDLENBQUMsQ0FBQTtRQUNQLENBQUM7UUFDRCxJQUFJLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQztZQUNqQixJQUFJLEVBQUUsS0FBSztZQUNYLE9BQU8sRUFBRTtnQkFDUCxRQUFRLEVBQUUsRUFBRTtnQkFDWixVQUFVLEVBQUU7Ozs7O2lCQUtYO2dCQUNELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRTtvQkFDckMsTUFBTSxJQUFJLEdBQUcsbUJBQW1CLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFBO29CQUMvQyxJQUFJLElBQUksZUFBaUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNO3dCQUN2RCxPQUFPLFNBQVMsQ0FBQTtvQkFDbEIsTUFBTSxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUE7b0JBQzNELElBQUksQ0FBQyxJQUFJO3dCQUFFLE9BQU8sU0FBUyxDQUFBO29CQUMzQixPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQ2hCLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQzt3QkFDckIsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDLFFBQVEsRUFBRTt3QkFDekIsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUU7cUJBQ3ZCLENBQUMsQ0FBQyxDQUNKLENBQUE7Z0JBQ0gsQ0FBQzthQUNGO1NBQ0YsQ0FBQyxDQUFBO1FBQ0YsRUFBRSxHQUFHLElBQUksd0JBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDaEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUM5QixJQUFJLENBQUMsY0FBYyxDQUFDLHlCQUFjLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7UUFDckUsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFBO0lBQ2pCLENBQUM7SUFFRCxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQWtCLEVBQUUsS0FBWTtRQUUvQyxNQUFNLE9BQU8sR0FBRyxNQUFNLEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBQ3JELElBQUksT0FBTyxFQUFFO1lBQ1gsSUFBSSxXQUFXLElBQUksT0FBTyxFQUFFO2dCQUMxQixPQUFPLE9BQU8sQ0FBQTthQUNmO2lCQUFNO2dCQUNMLE9BQU8sQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtnQkFDcEUsSUFBSSxPQUFPLENBQUMsYUFBYSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7b0JBQ3BDLE9BQU8sT0FBTyxDQUFBO2lCQUNmO2FBQ0Y7U0FDRjtRQUNELE9BQU8sSUFBSSxDQUFBO0lBQ2IsQ0FBQztDQUNGO0FBRUQsaUJBQVMsSUFBSSxpQkFBaUIsRUFBRSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXV0b0xhbmd1YWdlQ2xpZW50IH0gZnJvbSAnYXRvbS1sYW5ndWFnZWNsaWVudCdcbmltcG9ydCB7IFRleHRFZGl0b3IsIFBvaW50LCBSYW5nZSB9IGZyb20gJ2F0b20nXG5pbXBvcnQgKiBhcyBVUEkgZnJvbSAnYXRvbS1oYXNrZWxsLXVwaSdcbmltcG9ydCB7IGRhdGF0aXBBZGFwdGVyLCBMaW50ZXJBZGFwdGVyIH0gZnJvbSAnLi9hZGFwdGVycydcbmltcG9ydCB0eXBlIHsgTWFya2Rvd25TZXJ2aWNlIH0gZnJvbSAnYXRvbS1pZGUtYmFzZSdcblxuY2xhc3MgSExTTGFuZ3VhZ2VDbGllbnQgZXh0ZW5kcyBBdXRvTGFuZ3VhZ2VDbGllbnQge1xuICBwcml2YXRlIHVwaT86IFVQSS5JVVBJSW5zdGFuY2VcbiAgcHJpdmF0ZSByZW5kZXJlciA9IHsgcmVuZGVyOiBudWxsIGFzIE1hcmtkb3duU2VydmljZVsncmVuZGVyJ10gfCBudWxsIH1cbiAgZ2V0R3JhbW1hclNjb3BlcygpIHtcbiAgICByZXR1cm4gWydzb3VyY2UuaGFza2VsbCddXG4gIH1cbiAgZ2V0TGFuZ3VhZ2VOYW1lKCkge1xuICAgIHJldHVybiAnSGFza2VsbCdcbiAgfVxuICBnZXRTZXJ2ZXJOYW1lKCkge1xuICAgIHJldHVybiAnaGFza2VsbC1sYW5ndWFnZS1zZXJ2ZXInXG4gIH1cblxuICBzdGFydFNlcnZlclByb2Nlc3MocHJvamVjdFBhdGg6IGFueSkge1xuICAgIHJldHVybiBzdXBlci5zcGF3bignaGFza2VsbC1sYW5ndWFnZS1zZXJ2ZXItd3JhcHBlcicsIFsnLS1sc3AnXSwge1xuICAgICAgY3dkOiBwcm9qZWN0UGF0aCxcbiAgICB9KVxuICB9XG5cbiAgY29uc3VtZU1hcmtkb3duUmVuZGVyZXIocmVuZGVyZXI6IE1hcmtkb3duU2VydmljZSkge1xuICAgIHRoaXMucmVuZGVyZXIucmVuZGVyID0gcmVuZGVyZXIucmVuZGVyXG4gIH1cblxuICBjb25zdW1lVVBJKHNlcnZpY2U6IFVQSS5JVVBJUmVnaXN0cmF0aW9uKSB7XG4gICAgbGV0IGxhOiBMaW50ZXJBZGFwdGVyXG4gICAgZnVuY3Rpb24gZ2V0UmVsZXZhbnRNZXNzYWdlcyhlZGl0b3I6IFRleHRFZGl0b3IsIHJhbmdlOiBSYW5nZSkge1xuICAgICAgY29uc3QgbWVzc2FnZXMgPSBsYS5nZXRNZXNzYWdlcygpXG4gICAgICBjb25zdCBwYXRoID0gZWRpdG9yLmdldFBhdGgoKVxuICAgICAgcmV0dXJuIG1lc3NhZ2VzXG4gICAgICAgIC5maWx0ZXIoXG4gICAgICAgICAgKHgpID0+XG4gICAgICAgICAgICB4LmxvY2F0aW9uLmZpbGUgPT09IHBhdGggJiZcbiAgICAgICAgICAgIHJhbmdlLmludGVyc2VjdHNXaXRoKHgubG9jYXRpb24ucG9zaXRpb24pLFxuICAgICAgICApXG4gICAgICAgIC5tYXAoKHgpID0+ICh7XG4gICAgICAgICAgZmlsZVBhdGg6IHgubG9jYXRpb24uZmlsZSxcbiAgICAgICAgICBwcm92aWRlck5hbWU6ICdobHMnLFxuICAgICAgICAgIHJhbmdlOiB4LmxvY2F0aW9uLnBvc2l0aW9uLFxuICAgICAgICAgIHRleHQ6IHguZXhjZXJwdCxcbiAgICAgICAgICB0eXBlOiAnSW5mbycgYXMgY29uc3QsIC8vIGlycmVsZXZhbnQsIGJ1dCByZXF1aXJlZFxuICAgICAgICB9KSlcbiAgICB9XG4gICAgdGhpcy51cGkgPSBzZXJ2aWNlKHtcbiAgICAgIG5hbWU6ICdobHMnLFxuICAgICAgYWN0aW9uczoge1xuICAgICAgICBwcmlvcml0eTogNTAsXG4gICAgICAgIGV2ZW50VHlwZXM6IFtcbiAgICAgICAgICBVUEkuVEV2ZW50UmFuZ2VUeXBlLmNvbnRleHQsXG4gICAgICAgICAgVVBJLlRFdmVudFJhbmdlVHlwZS5rZXlib2FyZCxcbiAgICAgICAgICBVUEkuVEV2ZW50UmFuZ2VUeXBlLm1vdXNlLFxuICAgICAgICAgIFVQSS5URXZlbnRSYW5nZVR5cGUuc2VsZWN0aW9uLFxuICAgICAgICBdLFxuICAgICAgICBoYW5kbGVyOiBhc3luYyAoZWRpdG9yLCByYW5nZSwgdHlwZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IG1zZ3MgPSBnZXRSZWxldmFudE1lc3NhZ2VzKGVkaXRvciwgcmFuZ2UpXG4gICAgICAgICAgaWYgKHR5cGUgPT09IFVQSS5URXZlbnRSYW5nZVR5cGUua2V5Ym9hcmQgJiYgIW1zZ3MubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgICAgIGNvbnN0IGFjdHMgPSBhd2FpdCB0aGlzLmdldENvZGVBY3Rpb25zKGVkaXRvciwgcmFuZ2UsIG1zZ3MpXG4gICAgICAgICAgaWYgKCFhY3RzKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFxuICAgICAgICAgICAgYWN0cy5tYXAoYXN5bmMgKHgpID0+ICh7XG4gICAgICAgICAgICAgIHRpdGxlOiBhd2FpdCB4LmdldFRpdGxlKCksXG4gICAgICAgICAgICAgIGFwcGx5OiAoKSA9PiB4LmFwcGx5KCksXG4gICAgICAgICAgICB9KSksXG4gICAgICAgICAgKVxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KVxuICAgIGxhID0gbmV3IExpbnRlckFkYXB0ZXIodGhpcy51cGkpXG4gICAgdGhpcy5jb25zdW1lTGludGVyVjIoKCkgPT4gbGEpXG4gICAgdGhpcy5jb25zdW1lRGF0YXRpcChkYXRhdGlwQWRhcHRlcihzZXJ2aWNlLCB0aGlzLnVwaSwgdGhpcy5yZW5kZXJlcikpXG4gICAgcmV0dXJuIHRoaXMudXBpXG4gIH1cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLyBvdmVycmlkZXMgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICBhc3luYyBnZXREYXRhdGlwKGVkaXRvcjogVGV4dEVkaXRvciwgcG9pbnQ6IFBvaW50KSB7XG4gICAgLy8gSExTIGxpa2VzIHRvIHJldHVybiBlbXB0eSBkYXRhdGlwczsgdGhpcyB0cmllcyB0byBmaWx0ZXIgdGhvc2Ugb3V0XG4gICAgY29uc3QgZGF0YXRpcCA9IGF3YWl0IHN1cGVyLmdldERhdGF0aXAoZWRpdG9yLCBwb2ludClcbiAgICBpZiAoZGF0YXRpcCkge1xuICAgICAgaWYgKCdjb21wb25lbnQnIGluIGRhdGF0aXApIHtcbiAgICAgICAgcmV0dXJuIGRhdGF0aXBcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGF0aXAubWFya2VkU3RyaW5ncyA9IGRhdGF0aXAubWFya2VkU3RyaW5ncy5maWx0ZXIoKHgpID0+IHgudmFsdWUpXG4gICAgICAgIGlmIChkYXRhdGlwLm1hcmtlZFN0cmluZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHJldHVybiBkYXRhdGlwXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbiAgfVxufVxuXG5leHBvcnQgPSBuZXcgSExTTGFuZ3VhZ2VDbGllbnQoKVxuIl19